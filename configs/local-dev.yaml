############################
## Astronomer configuration
## For local Kubernetes development
## There should be an A record on *.local.astronomer-development.com
## with the value 127.0.0.1 and you should set up
## the secrets and TLS cert normally.
############################

tags:
  platform: true
  logging: false
  monitoring: false
  keda: true
  kubed: true
  postgresql: true
  nats: true

global:
  # Base domain for all subdomains exposed through ingress
  baseDomain: local.astronomer-development.com
  helmRepo: https://aliotta.github.io/helm-repo
  # Name of secret containing TLS certificate
  tlsSecret: astronomer-tls
  postgresqlEnabled: true
  # nginxEnabled: true # Disable nginx ingress
  # nodeExporterEnabled: false
  # sccEnabled: false # Required for OpenShift
  # authSidecar:
  #   enabled: false
  #   repository: nginxinc/nginx-unprivileged
  #   tag: stable
  #   pullPolicy: IfNotPresent
  #   port: 8084
  #   default_nginx_settings: |
  #     internal;
  #     proxy_pass_request_body     off;
  #     proxy_set_header            Content-Length          "";
  #     proxy_set_header            X-Forwarded-Proto       "";
  #     proxy_set_header            X-Original-URL          https://$http_host$request_uri;
  #     proxy_set_header            X-Original-Method       $request_method;
  #     proxy_set_header            X-Real-IP               $remote_addr;
  #     proxy_set_header            X-Forwarded-For         $remote_addr;
  #     proxy_set_header            X-Auth-Request-Redirect $request_uri;
  #     proxy_buffering             off;
  #     proxy_buffer_size           4k;
  #     proxy_buffers               4 4k;
  #     proxy_request_buffering     on;
  #     proxy_http_version          1.1;
  #     proxy_ssl_server_name       on;
  #     proxy_pass_request_headers  on;
  #     client_max_body_size        1024m;
  #   default_nginx_settings_location: |
  #     auth_request     /auth;
  #     auth_request_set $auth_status $upstream_status;
  #     auth_request_set $auth_cookie $upstream_http_set_cookie;
  #     add_header       Set-Cookie $auth_cookie;
  #     auth_request_set $authHeader0 $upstream_http_authorization;
  #     proxy_set_header 'authorization' $authHeader0;
  #     auth_request_set $authHeader1 $upstream_http_username;
  #     proxy_set_header 'username' $authHeader1;
  #     auth_request_set $authHeader2 $upstream_http_email;
  #     proxy_set_header 'email' $authHeader2;
  #     error_page 401 = @401_auth_error;
  #     proxy_set_header Upgrade $http_upgrade;
  #     proxy_set_header Connection 'connection_upgrade';
  #     proxy_set_header X-Real-IP              $remote_addr;
  #     proxy_set_header X-Forwarded-For        $remote_addr;
  #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #     proxy_cache_bypass $http_upgrade;
  #     proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
  #     proxy_connect_timeout                   15s;
  #     proxy_send_timeout                      600s;
  #     proxy_read_timeout                      600s;
  #     proxy_buffering                         off;
  #     proxy_buffer_size                       4k;
  #     proxy_buffers                           4 4k;
  #     proxy_max_temp_file_size                1024m;
  #     proxy_request_buffering                 on;
  #     proxy_http_version                      1.1;
  #     proxy_cookie_domain                     off;
  #     proxy_cookie_path                       off;
  #     proxy_redirect                          off;
  #   resources:
  #     limits: {}
  #     requests: {}
  # extraAnnotations:
  #   kubernetes.io/ingress.class: astronomer-nginx
  nats:
    replicas: 1
    enabled: true
  stan:
    replicas: 1
    enabled: true
  ssl:
    enabled: false
  # Custom CA TLS certificates
  # Each secret must have one data entry 'cert.pem'
  privateCaCerts:
  - private-ca

nats:
  cluster:
    enabled: false
    replicas: 1
  resources: {}

stan:
  stan:
    replicas: 1
  store:
    cluster:
      enabled: false
  resources: {}

############################
## Astronomer configuration
## Omit resource requests
############################
astronomer:
  astroUI:
    replicas: 1
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"
  houston:
    replicas: 1
    env:
    - name: DEPLOYMENTS__LOG_HELM_VALUES
      value: "true"
    - name: DEPLOYMENTS__AUTH_SIDECAR_ENABLED
      value: "true"
    worker:
      replicas: 1
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"

    config:
      emailConfirmation: false
      auth:
        local:
          enabled: true
        bypassAuthSSL: true
  commander:
    replicas: 1
    env:
    - name: HELM_REPO
      value: "https://aliotta.github.io/helm-repo"
    - name: HELM_REPO_NAME
      value: "aliottahelmrepo"
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"
  registry:
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"
  install:
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"


#################################
## Nginx configuration
#################################
nginx:
  replicas: 1
  replicasDefaultBackend: 1
  # Configure resources
  resources:
    requests:
      cpu: "500m"
      memory: "1024Mi"
    limits:
      cpu: "1"
      memory: "2048Mi"

#################################
## Grafana configuration
#################################
grafana:
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Mi"

#################################
## Prometheus configuration
#################################
prometheus:
  replicas: 1
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Gi"

prometheus-postgresql-exporter:
  replicaCount: 1
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Gi"

#################################
## Elasticsearch configuration
#################################
elasticsearch:
  # Configure client nodes
  client:
    replicas: 1
    resources:
      requests:
        cpu: "0"
        memory: "0Gi"

  # Configure data nodes
  data:
    replicas: 1
    resources:
      requests:
        cpu: "0"
        memory: "0"

  # Configure master nodes
  master:
    replicas: 1
    resources:
      requests:
        cpu: "0"
        memory: "0Gi"


#################################
## Kibana configuration
#################################
kibana:
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Mi"


#################################
## Fluentd configuration
#################################
fluentd:
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Mi"


#################################
## Kube State configuration
#################################
kubeState:
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Mi"
